
#include<
#include "Graph.h"
#include <glut.h>


/*int mx = 0;
int my = 0;
bool mdown = false;


void mouse (int button, int state, int xc, int yc){
 mx = xc;
 my = yc;
mdown = state == GLUT_DOWN;
}*/
int main(int argc, char** argv) {

	setlocale(LC_ALL, "ru");
	glutInit(&argc, argv);

	graph.addVertex(1);
	graph.addVertex(2);
	graph.addVertex(3);
	graph.addVertex(4);
	graph.addVertex(5);
	graph.addVertex(6);

	
	
	graph.addEdge(1, 4, n);
	graph.addEdge(4, 1, n);
    graph.addEdge(4, 3, n);
	 graph.addEdge(3, 4, n);
	graph.addEdge(3, 5, n);
	graph.addEdge(5, 3, n);
	graph.addEdge(5, 6, n);
	raph.addEdge(6, 5, n);
	graph.addEdge(6, 2, n);
	graph.addEdge(2, 6, n);
    graph.addEdge(2, 3, n);
	graph.addEdge(3, 2, n);
	graph.addEdge(2, 1, n);

	

	
	graph.Print();
	cout << endl;

	int c = 3;
	graph.Dijkstra(c);

	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);

	//WinW = glutGet(GLUT_WINDOW_WIDTH);
//	WinH = glutGet(GLUT_WINDOW_HEIGHT);
glutGameModeString("800x600:32");
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutMouseFunc(mouse);
	//if(mdown == 1){graph.addEdge(1, 4, 16);}
//	while(mdown != 1){if(mdown == 1){graph.addEdge(1, 4, 16);}}
	 glutTimerFunc(50, timer, 0); // ... Ну и в начале программы задаем рекурсивный таймер.
	glutMainLoop();

	return 0;
}

